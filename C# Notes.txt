Software & Tools - 

	1) Microsoft SQL Server 14 and onwards
	2) Microsoft Visual Studio 2022
	3) Microsoft Visual Studio Code
	4) Node JS LTS version

.NET Framework 4.8 [Windows Platform]

.NET Core 8.0 [Cross Platform] [Versions - 1.0, 2.0, 3.0, 5.0, 6.0, 7.0 [STS], 8.0]

Components of .NET Core -

1) CLR - Common Language Runtime
2) FCL/BCL - Framework Class Library/Base Class Library
3) CTS - Common Type System
4) CLS - Common Language Specifications [Set of Rules]


C#/VB.NET/...

Types - 
	1) Value Type - Structures
	2) Reference Type - Classes
	
Memory Management - 
	1) Managed Memory - Managed by CLR
	2) Unmanaged Memory - IDisposable=>Dispose() - You write the clean up code of Unmanaged objects [File IO, Network, Database, Etc.]
		GC.SupressFinalize()

GC.Collect() //Will call garbage collector explicitly

.sln - Solution file - contains different types of projects
.csproj - C# Project

Use Solution Explorer of Visual Studio 2022 to see all the projects under one solution

https://github.com/PravinkumarRD/bytejan2024


Day-2

SOLID Principles

S - Single Responsibility Principle [SRP]
O - Open-Close Principle [OCP]
L - Liskov Substitution Principle [LSP]
I - Interface Segregation Principle [ISP]
D - Dependency Inversion Principle [DI]


4 Major Pillars of OOP 
	1) Abstraction
	2) Encapsulation
		Class acts like a template where you bundle your abstraction
		Hiding - [Access Modifiers - Private, Public, Protected, Internal, Protected Internal]
		Class Types - 
			Abstract Class
			Concret Class
			Final/Sealed Class
			Static Class
			Partial Class
			Anonymous Class
	3) Inheritance - [Reusability]
			Generalization-To-Specialization
			Relationships - IS-A [HAS-A]
			Single, Multiple [Not Supported], Multilevel, Hierarchy, Hybrid

			Example - 
				//You cannot create an instance of an abstract class
				abstract class Person {
					//properties
					//methods
					//...
				}
				//Can be used by creating an instance or by exending
				class Customer : Person{
					//CustomerId;
				}
				//Can not be extended but can be used by creating new instance
				sealed class PrimeCustomer : Customer{

				}
	4) Polymorphism
		Overloading, Early Binding, Static, Compile time
		Overriding, Late Binding, Dynamic, Runtime
	
class Address{
...
}

Class Parent{
	private x;
	public y;
	protected z;
	Address address;
	int a;
}

Class Child : Parent{
	Public and Protected as inherited members
}

Parent p1=new Parent();
p1.Public

Interfaces - 

interface IPhysics{
	string phyCalci(int unit);
}
interface IBiology{
	string bioCalci(int unit);
}
interface IChemistry{
	string chemCalci(int unit);
}

interface DepartmentHod:IPhysics, IChemistry, IBiology

SOA - Service Oriented Architecture [Web Service]

class Science:IPhysics, IBiology, ICheimstry{
	bioCalci(){

	}
	chemCalci(){

	}
	phyCalci(){

	}

}

IBiology x1=new Science();
x1.bioCalci();

IChemistry x2=new Science();
x2.chemCalci();

IPhysics x3=new Science();
x3.phyCalci();

hod=new Science();
hod.bioCalci();
hod.phyCalci();
hod.chemCalci();



Overloading - 

class Math {
	int add(int i, int j)
	int add(int i, int j, int k)
	int add(double i, int j)
}
class AdvanceMath : Math{
	int add(double i, double j)
}


Overriding - 

class Parent{
	virtual int addition(int i, int j){
		return i + j + 1000;
	}
}

class Child : Parent {
	override int addition(int i, int j){
		return i + j - 1000;
	}
}

Parent p1=new Parent();
p1.addition(1000,1000); Output - 3000

Child c1=new Child();
c1.addition(1000,1000); Output - 1000

Parent pc1=new Child();
pc1.addition(1000,1000); Output - 1000

Function Parameter Types - 
	1) Input
	2) out or ref
	3) params


Shadowing - Hiding

Constructor - 
	Are used for initialization
	Constructor overloading
Types - 
	1) Default - 
	2) Parameterized
	3) Copy - 
	4) Static - Static constuctor is executed before the first object creation process and exactly once throughout the application's lifecycle

class Customer{
	
	int count=0;
	public Customer(){
		++count;
	}
}

new Customer();
new Customer();
new Customer();
new Customer();
new Customer();

Data Storages - 
	
1) In-Memory - 
	i) Array - [1D, 2D, Jagged]
		Similar type of data with fixed size
	ii) Collections
		a) Non-Generic Collections
			Namespace - System.Collections;
				ArrayList, Stack, Queue, Hashtable [Key-Value]
		b) Generic Collections [Recommended]
			Namespace - System.Collections.Generic;
				List<T>, Stack<T>, Queue<T>, Dictionary<TKey, TValue>


Purchase Order System - 
	Categories, Products, Customers, Employees, Order, OrderDetails, Suppliers, Shippers, Invoices

CRUD - Create [Insert], Read [Select], Update and Delete

All Model names are singular and all table names must be plural

Template Approach [Generics]
	Interfaces, Classes, Methods, Properties, ...

T stands for Type [Premitive/Complex]

class CommonCrud<T>{
	GetAll():List<T>
	GetDetails():T
	Insert(T item)
	Update(T item)
	Delete(T item)
}

class Customer {...}
class Category {...}

CommonCrud<Customer> custCrud=new CommonCrud<Customer>();
CommonCrud<Category> custCrud=new CommonCrud<Category>();


Different Delegate Types - 
	1) Void - Perform a task without returning anything
	2) Return - Func<T> - Return a specific type of value
	3) Predicate - Predicate<T> - Conditional Delegate - Looks for boolean value - If true, get the result and if false no result


LINQ - Language Integrated Query

All LINQ queries output will always be either IEnumerable<T> or IQuerable<T>

	1) OLINQ - Linq-To-Object
	2) XLINQ - Linq-To-Xml
	3) DLINQ - Linq-To-Data


select */col1, col2, ... from Table
where condition
groupby expression
orderby expression;

Agreegate queries Inner joins, outer joins, subqueries,...

1) 
select * from table;

from variable_name in collection_name
select variable_name;

2) 
select * from table where city="London";

from variable_name in collection_name
where variable_name.property==value
select variable_name;

3) 
select city, count(*) from customers group by city;

from customer in GetAllCustomers()
group customer by customer.city into group_varible
select new Result {City=group_variable.Key, Count=group_variable.Count()};

4) 
select * from table orderby city desc;

from customer in GetAllCustomers()
orderby customer.city descending
select customer;


File IO Operations - 

import namespace - System.IO

	1) File class - Offers number of static methods using which you can - 
		1) Check existance of the file
		2) Create new file
		3) Delete
		4) Move
		5) Copy
		6) Read and write operations
		...
	2) DriveInfo - This class will give information about all the drives
	3) DirectoryInfo - This class will give information about the directory
	4) FileInfo - This class will give information about the file
	5) Directory - Gives you number of static methods
	6) StreamWriter [TextWriter], StreamReader [TextReader]
	7) FileStream

Serialization and Deserialization - 
	Persisting the state of an object is a process called Serialization. In general, writing the state of an object.
	Reading the persisted state of an object

	1) Binary Serialization [For Desktop application]
		System.Runtime.Serialization.Formatters.Binary;
			BinaryFormatter [class]
				serialize(where,whichobject);
				deserialize(from-where)
				
	2) Xml Serialization
		System.Xml.Serialization;
			XmlSerializer
				serialize(where,whichobject);
				deserialize(from-where)
	3) SOAP Serialization [Web Services]
		Simple Object Access Protocol


Exception Handling - 

	try {

	}
	catch(SpecificEx1 ex1) {

	}
	catch(SpecificEx2 ex2) {

	}
	catch(SpecificEx3 ex3) {

	}
	catch(Exception ex){

	}

https://codepen.io/pravinkumarcode/pen/zYLZwep

1) Create a solution with two applications. 
	1) DLL for 4 basic math operations - 
		BasicMath
			Addition, Subtraction, Division, Multiplication
		AdvanceMath
			Square and SquareRoot
	2) EXE [Console] application which will use the above DLL and perform all 6 math operations

2) Serialize and Deserialize Notice object in Xml format
	Notice - NoticeId, Title, Message, CreatedDate, CreatedBy [Don't serialize this property]
		Integer,   String, String, DateTime,    String


While working threads - 
	System.Threading;
		Gives you classes to work with threads

Thread Synchronization - 
	1) Lock
	2) Monitor
	3) Mutex
	4) Semaphore

Task Parallel Library - [TPL]
	Task - Void 
	Task<T> - Return some output of Type T - Premitive/Complex/Custom































